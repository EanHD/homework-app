You are auditing my “homework-app” repo. Do the following in order:

0) ORIENTATION
- Detect framework, package manager, build tool, and where the app is served from (localhost vs Pages/Netlify/etc).
- Print a short project map: key folders/files and their purpose.

1) LEARN SPECKIT (REQUIRED BEFORE ANY CHANGES)
- Read everything under `.github/` related to SpecKit (e.g., `/specify`, `/plan`, `/tasks`, contributing docs, checklists, CI).
- Produce a 10–12 line summary of how SpecKit works in THIS repo (commands, conventions, branching, PR etiquette).
- List the exact “slash commands” I can issue here (e.g., `/specify`, `/plan`, `/tasks`, etc.) and what each will make you do in THIS project.

2) NOTIFICATIONS DEBUGGING (TOP PRIORITY)
Goal: make app notifications work reliably in production and local dev.

A) Identify the notification stack:
- Is this Web Push? Which service worker file? Which registration path?
- Where is subscription created/stored? (DB table / Supabase / local storage)
- What backend handles subscribe/unsubscribe/send? (Supabase Functions? Which endpoints?)
- Any scheduled/cron triggers for test pings?

B) Static checks:
- Service worker: scope, file path, registration timing, duplicate registrations, cache busting.
- Permissions flow: `Notification.requestPermission()` timing; guard rails for unsupported browsers; HTTPS origin.
- Push keys: VAPID/public key location and exposure; environment injection.
- Storage: where the push subscription is persisted; schema shape; RLS policies if Supabase; cleanup of stale subscriptions.

C) Supabase integration (if used):
- List functions (e.g., `subscribe`, `schedule`, `send`) and show the current `deno.json` per-function flags (verify_jwt on/off).
- Confirm CORS policy location (e.g., `supabase/functions/_shared/cors.ts`) and allowed origins. Show exact origins configured.
- Validate preflight: show sample `curl -X OPTIONS` that succeeds.
- Show an end-to-end test: `curl` or minimal Node/Deno script that: requests permission → registers SW → posts to `/subscribe` → triggers a test notification → verifies receipt.
- Point out any `401/403/CORS` or mixed content traps and fix recommendations.

D) Runtime checks:
- Run the app locally; open DevTools; reproduce any errors/warnings in Console and Application → Service Workers/Push; paste logs.
- Verify the sequence: load → register SW → permission state → create subscription → successful backend store → test push arrives.

E) Deliverables for notifications:
- `NOTIFICATIONS_REPORT.md` with: current design, failure points, concrete fixes, and a “1-click” validation script/commands (curl or node).
- If changes are safe, open a branch and implement:
  - SW fixes (registration, scope, cache busting)
  - Permissions UX guardrails
  - Supabase function tweaks (CORS, `verify_jwt` settings by endpoint, error handling)
  - Add a `/scripts/test-push.[ts|js]` or Makefile target
- Include before/after screenshots or console logs. Open a PR with a short checklist for me to test.

3) VISUAL BUGS / UX POLISH
- Document all visible layout issues: header height, bottom bar overlap, list clipping, unsafe `100vh` on mobile, missing safe-area insets, z-index issues, scroll bounce, focus/keyboard overlaps.
- Verify responsive breakpoints; inspect any CSS using `position: fixed`/`sticky`, `overflow: hidden`, and container heights that cause content to be cut off.
- Suggest minimal diffs to fix: prefer CSS/utility tweaks over refactors. Respect the existing design system (tokens, variables).
- Add a lightweight visual regression check if feasible (Storybook snapshot or Playwright page screenshot).
- Deliver `UI_REPORT.md` with findings + diffs. If low risk, push a branch and open a PR.

4) TESTS & CI
- Add or extend tests that prove notifications + layout guardrails (e.g., unit tests for subscription flow; Playwright e2e for “subscribe → receive test push”).
- Ensure CI runs these checks. If repo uses SpecKit CI, integrate with its tasks.

5) OUTPUT FORMAT (IMPORTANT)
Reply with:
- A) “SpecKit Summary & Slash Commands” (the 10–12 line summary + command list)
- B) “Notifications Report” (bulleted; include file paths, code blocks, and exact commands to run)
- C) “UI/UX Report” (bulleted; include before/after CSS/JS snippets)
- D) PR links or proposed branch names and diff summaries
- E) A final, copy-paste “Smoke Test” section with commands to validate everything locally and in production

6) AFTER THIS MESSAGE
After you post the above, you must accept slash commands from me in this chat, per the SpecKit docs you just read. Do not ask me questions first—make best-effort fixes, show diffs, and propose PRs. Then wait for my `/` commands.
